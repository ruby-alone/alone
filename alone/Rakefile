# coding: utf-8
# alone : application framework for embedded systems.
#
# This file is destributed under BSD License. Please read the LICENSE file.
#
#


require "rbconfig"

Dir.chdir(File.dirname(__FILE__))



########################################
# about locale
#
# (Directory structure)
#
#  lib/locale/   (alone-lib only translation file)
#   |-- alone.pot
#   +-- ja_JP/
#        |-- alone.po
#        +-- LC_MESSAGES/messages.mo
#
#  locale/       (user programs translation file)
#   |-- userapp.pot
#   +-- ja_JP/
#        |-- userapp.po
#        |-- (alone.po)              (This takes priority if exist)
#        +-- LC_MESSAGES/messages.mo (User and alone-lib merged)
#

GETTEXT_ALONE_LOCALE_DIR = "lib/locale"
GETTEXT_LOCALE_DIR = "locale"

# temporary.
# task :default => [:gettext_make_alone_pot,
#                   :gettext_make_alone_po,
#                   :gettext_make_alone_mo,
#                   :gettext_make_pot,
#                   :gettext_make_po,
#                   :gettext_make_mo] do
# end
task :default => [:gettext_make_pot,
                  :gettext_make_po,
                  :gettext_make_mo] do
end

task :gettext_make_alone => [:gettext_make_alone_pot,
                             :gettext_make_alone_po,
                             :gettext_make_alone_mo] do
end


##
# Get locale from environment variables.
#
def get_locale()
  locale = ENV['locale']
  if !locale
    puts "Error: Specify the variable locale. (e.g. rake gettext_make_mo locale=ja_JP)"
    exit
  end

  return locale
end

##
# Ensure that the target is newer than the source files.
#
def target_is_newer( target, *source_files )
  return nil if !File.exist?( target )

  target_mtime = File.mtime( target )
  source_files.flatten.each {|file|
    if File.exist?( file ) && File.mtime( file ) > target_mtime
      return false
    end
  }

  return true
end

##
# For Alone library;
# Create the translation template.
#  lib/*.rb -> alone.pot
#
task :gettext_make_alone_pot do
  outdir = GETTEXT_ALONE_LOCALE_DIR
  FileUtils.mkpath(outdir)

  files = FileList["lib/**/*.rb"]
  outfile = "#{outdir}/alone.pot"
  next if target_is_newer(outfile, files)

  puts "\n===> Create alone.pot to #{outdir} dir."
  sh "rxgettext #{files} --output=#{outfile}"
  sh "sed -i '' -e '/POT-Creation-Date/d' -e '/PO-Revision-Date/d' #{outfile}"
end


##
# For Alone library;
# Convert the translation template into a translation file for each locale.
#  alone.pot -> (ja_JP)/alone.po
#
task :gettext_make_alone_po do
  locale = get_locale()
  outdir = "#{GETTEXT_ALONE_LOCALE_DIR}/#{locale}"
  FileUtils.mkpath(outdir)

  # create or update .po files.
  infile  = "#{GETTEXT_ALONE_LOCALE_DIR}/alone.pot"
  outfile = "#{GETTEXT_ALONE_LOCALE_DIR}/#{locale}/alone.po"
  next if target_is_newer(outfile, infile)

  if !File.exist?(outfile)
    puts "\n===> Create alone.po"
    sh "rmsginit --locale=#{locale} --input=#{infile} --output=#{outfile}"
  else
    puts "\n===> Merge alone.pot with existing alone.po"
    sh "rmsgmerge -U #{outfile} #{infile}"
  end
end


##
# For Alone library;
# Compile the translation file for each locale.
#  (ja_JP)/alone.po -> (ja_JP)/LC_MESSAGES/messages.mo
#
task :gettext_make_alone_mo do
  locale = get_locale()
  outdir = "#{GETTEXT_ALONE_LOCALE_DIR}/#{locale}/LC_MESSAGES"
  FileUtils.mkpath(outdir)

  infile  = "#{GETTEXT_ALONE_LOCALE_DIR}/#{locale}/alone.po"
  outfile = "#{outdir}/messages.mo"
  next if target_is_newer(outfile, infile)

  puts "\n===> Create alone only messages.mo"
  sh "rmsgfmt #{infile} -o #{outfile}"
end


##
# For user programs;
# Copy or merge the alone library translation template file for each locale.
#  lib/locale/alone.pot --------> locale/(ja_JP)/alone.po
#   (or)
#  lib/locale/(ja_JP)/alone.po -> locale/(ja_JP)/alone.po
#
desc "Copy or merge the alone library translation template file for each locale."
task :gettext_copy_po do
  locale = get_locale()
  outdir = "#{GETTEXT_LOCALE_DIR}/#{locale}"
  outfile = "#{outdir}/alone.po"
  FileUtils.mkpath(outdir)

  # When alone.po already exists in the library locale directory.
  alone_locale_po = "#{GETTEXT_ALONE_LOCALE_DIR}/#{locale}/alone.po"
  if File.exist?( alone_locale_po )
    if File.exist?( outfile )
      puts "\n===> merge distributed alone.po into #{outfile}"
      sh "rmsgcat --output=#{outdir}/_temp_.po #{outfile} #{alone_locale_po}"
      FileUtils.mv( "#{outdir}/_temp_.po", outfile )

    else
      puts "\n===> copy distributed alone.po to #{outdir}"
      FileUtils.cp( alone_locale_po, outdir )
    end
    next
  end

  # When alone.po is not exist in the library locale directory.
  alone_pot = "#{GETTEXT_ALONE_LOCALE_DIR}/alone.pot"
  if File.exist?( outfile )
    puts "\n===> merge distributed alone.pot into #{outfile}"
    sh "rmsgmerge -U #{outfile} #{alone_pot}"

  else
    puts "\n===> create #{outfile} from distributed alone.pot"
    sh "rmsginit --locale=#{locale} --input=#{alone_pot} --output=#{outfile}"
  end
end


##
# For user programs;
# Create the translation template.
#  (*.rb -> userapp.pot)
#
desc "Create gettext translation template (.pot) file."
task :gettext_make_pot do
  outdir = GETTEXT_LOCALE_DIR
  FileUtils.mkpath(outdir)

  files = FileList["controllers/**/*.rb", "controllers/**/*.rhtml",
                   "views/**/*.rhtml", "models/**/*.rb"]
  outfile = "#{GETTEXT_LOCALE_DIR}/userapp.pot"
  next if target_is_newer(outfile, files)

  puts "\n===> Create userapp.pot to #{outdir} dir."
  sh "rxgettext #{files} --output=#{outfile}"
end


##
# For user programs;
# Convert the translation template into a translation file for each locale.
#  (userapp.pot -> (ja_JP)/userapp.po)
#
desc "Convert gettext template(.pot) to resource(.po) for each locale."
task :gettext_make_po do
  locale = get_locale()
  outdir = "#{GETTEXT_LOCALE_DIR}/#{locale}"
  FileUtils.mkpath(outdir)

  # create or update .po files.
  infile  = "#{GETTEXT_LOCALE_DIR}/userapp.pot"
  outfile = "#{GETTEXT_LOCALE_DIR}/#{locale}/userapp.po"
  next if target_is_newer(outfile, infile)

  if !File.exist?(outfile)
    puts "\n===> Create userapp.po"
    sh "rmsginit --locale=#{locale} --input=#{infile} --output=#{outfile}"
  else
    puts "\n===> Merge userapp.pot with existing userapp.po"
    sh "rmsgmerge -U #{outfile} #{infile}"
  end
end


##
# For user programs;
# Compile userapp.po and alone.po to messages.mo
#
desc "Compile gettext translation resouce files."
#
task :gettext_make_mo do
  locale = get_locale()
  outdir = "#{GETTEXT_LOCALE_DIR}/#{locale}/LC_MESSAGES"
  FileUtils.mkpath(outdir)

  files = FileList["#{GETTEXT_LOCALE_DIR}/#{locale}/userapp.po"]
  alone_po_lib  = "#{GETTEXT_ALONE_LOCALE_DIR}/#{locale}/alone.po"
  alone_po_user = "#{GETTEXT_LOCALE_DIR}/#{locale}/alone.po"

  if File.exist?( alone_po_user )
    files << alone_po_user
  elsif File.exist?( alone_po_lib )
    files << alone_po_lib
  end

  outfile = "#{outdir}/messages.mo"
  next if target_is_newer(outfile, files)

  puts "\n===> merge userapp.po with alone.po, and compile."
  sh "rmsgcat --output=#{outdir}/_temp_.po #{files}"
  sh "rmsgfmt #{outdir}/_temp_.po -o #{outfile}"
  File.delete("#{outdir}/_temp_.po")
end
